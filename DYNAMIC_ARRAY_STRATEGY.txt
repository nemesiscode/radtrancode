This branch is created for included the files in which the declaration of variables is being changed from the Fortran77 style to Fortran90, in which some arrays, when possible, are declared as allocatable or dynamic arrays.

The steps summarising the strategy to follow for changing Nemesis from static to dynamic arrays is as follows:

    -  Choose a variable from either "/radtran/includes/arrdef.f" or "/nemesis/arraylen.f" and identify all the routines in which these variables are used.

    -  Change the variable and array declaration from the Fortran77 style to the Fortran90 one. Go from the outside to deeper in the code, and declare
       allocatable arrays when possible.

    -  When an array is allocated, it is important to check whether it was actually well allocated. This is done by, for example:
    
          allocate( yn(ny) , STAT=status )
          if(status.gt.0)then
            print*,'error in nemesisL.f'
            print*,'yn was was not properly allocated'
            stop
          endif

    -  Passing allocatable arrays to subroutines and functions is not easy. The strategy that we are following is to declare allocatable arrays in the possible
       outermost part of the code, and then using automatic arrays in the subroutine or function (not sure if it is the best option). Example:


            PROGRAM dummy_program
          
              integer :: ny
            real, allocatable :: yn(:)
           
            print*,'Read the array size:'
            read(*,*) ny

            allocate( yn(ny) , STAT=status )
            if(status.gt.0)then
             print*,'error in nemesisL.f'
             print*,'yn was was not properly allocated'
             stop
            endif

            call dummy_subroutine(ny,yn)

           END



           SUBROUTINE dummy_subroutine(ny,yn)
          
            integer, intent(in) :: ny
            real, intent(in) :: yn(ny)        
            integer :: i

            do i=1,ny
              yn(i)=i
            enddo

            return

           END



    - Even chanigng one variable in the code takes time, as there are lots of routines. For this branch to compile well and being useful in the meanwhile,
      we must keep it in shape, with a coherent size for the different arrays. Therefore, until ALL the routines in which a given size is used, the arrays must
      be allocated and called with the maximum array size declared in "/radtran/includes/arrdef.f" or "/nemesis/arraylen.f" (e.g. my). Once all the routines
      using that array size have been changed, then we should go to each of them again, changing the maximum array size by the new declaration (e.g. changing
      my by ny). After that, the job should be done with that variable!

    - The process of changing one variable can take a while. Therefore, please update the file DYNAMIC_ARRAY_HISTORY.txt in this branch, with the routines
      that have been updated for each variable. One * at the beginning indicates that it has been changed for the first part, but still with the arrays being
      declared with the maximum array size, while ** indicates that they have been changed also from the maximum array to the "real" array (e.g. from my to ny)





