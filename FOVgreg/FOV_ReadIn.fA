C     This file contains the two subroutines necessary to read-in the 
C     FOV calibration data.  At the moment, these routines assume that 
C     the FOV calibration data is stored in a file called 
C     "Master_FOV.dat", which resides in the local directory whence the 
C     program is executed.  
C
C     The reading-in process is split into two steps:
C       1. First we read the data file and examine it to come up with 
C          array bound information that may change from time to time, if 
C          the FOV data is ever updated.  We are after the maximum data 
C          lengths for the FOV response curves.  This comes from finding 
C          the maximum values of array lengths.
C       2. After we have the appropriate array lengths, then we can 
C          allocate array space in which to store our angular axes and 
C          response curves.
C
C     These routines assume that Master_FOV.dat has 189 columns, one 
C     for each MCS detector.
C
C     Master.dat has a number of rows stored in the following order of sections:
C     1  Array Label (1 = A, 2 = B)
C     2  Channel Label (1-6, 1-3)
C     3  Detector Number (1-21)
C     4  Vertical detector position
C     5  Length of actual data stored in real arrays
C     6  Angular elevation axis of vertical FOV data
C     7  Vertical FOV response data
C     8  Horizontal detector position
C     9  Length of actual data stored in real arrays
C     10 Angular azimuth axis of horizontal FOV data
C     11 Horizontal FOV response data
C
C     Sections 5 and 9 are the sections that give us array dimension size.  
C     Sections 6 & 7 will have a length equal the maximum value of 
C     section 5, and any detectors which have fewer data points 
C     specified than this max value will have been zero padded at their 
C     end.  Similarly, Sections 10 & 11 will have a length equal to the 
C     maximum value of section 9. Master_FOV.dat was generated by a 
C     Matlab script "ToWriteFOV.m" that reads in the native Matlab saved 
C     variables in FinalVFOV.mat and FinalHFOV.mat.
C
C---------------------------------------------------------------------------------

C     FOV_ReadIn_Sizes should be called first to retrieve the dimensions 
C     iv & ih. This takes in the dimension ndet and narr, which could 
C     potentially be hard-coded into the routine or passed via a module 
C     or common block, and reads the file "Master_FOV.dat" which holds 
C     all the FOV calibration data. The data in Master_FOV.dat were 
C     written in double precision, so this subroutine forces one to 
C     assume this.

      subroutine FOV_ReadIn_Sizes( ndet, narr, iv, ih )

      implicit none

      integer, intent(in)  :: ndet, narr
  integer, intent(out) :: iv, ih

  integer :: k 
  real*8  :: rdum(ndet*narr)

C Open the file containing the FOV calibration data -- ascii text, double
C   precision storage
  open(unit=10,file='/home/jupiter/plan/teanby/mcs/FOVgreg/Master_FOV.dat',status='old')

C Read one row at a time
C   The fifth row accesses Section 5 of the file, and this is what we want
  do k = 1, 5
     read(10,*) rdum
  end do

C Find the maximum value of this section, and convert it to an integer
  iv = nint( maxval( rdum ) )

C Using the array length just learned, read past the rows contained in 
C   Sections 6 & 7 & 8
  do k = 1, iv+iv+1
     read(10,*) rdum
  end do

C Now read Section 9, containing the lengths of horizontal response data
  read(10,*) rdum

C Find the maximum value of this section, and convert it to an integer
  ih = nint( maxval( rdum ) )

  close(10)

end subroutine FOV_ReadIn_Sizes

C---------------------------------------------------------------------------------
C FOV_ReadIn should be called after memory has been allocated for the FOV arrays,
C   namely, Xfov, Yfov, Hfov, and Vfov.  These arrays depend on knowing ih & iv, 
C   which are found by calling FOV_ReadIn_Sizes.
C
C This subroutine reopens the FOV calibration data file, "Master_FOV.dat", and now
C   stores its contents in different arrays.  
C
C Inputs:
C   ndet               -- integer -- number of detectors
C   narr               -- integer -- number of arrays
C   iv                 -- integer -- maximum length of vertical FOV response
C   ih                 -- integer -- maximum length of horizontal FOV response
C
C Outputs:
C   Yfov(iv,ndet,narr) -- real    -- array of angular axes for vertical FOV
C   Xfov(ih,ndet,narr) -- real    -- array of angular axes for horizontal FOV
C   Vfov(iv,ndet,narr) -- real    -- array of vertical FOV responses
C   Hfov(ih,ndet,narr) -- real    -- array of horizontal FOV responses
C   VDet(ndet,narr)    -- real    -- array of vertical detector positions
C   HDet(ndet,narr)    -- real    -- array of horizontal detector positions
C   Lv(ndet,narr)      -- integer -- array of response lengths for vertical FOV
C   Lh(ndet,narr)      -- integer -- array of response lengths for horizontal FOV

subroutine FOV_ReadIn( ndet, narr, iv, ih, Yfov, Xfov, Vfov, Hfov, VDet, HDet, Lv, Lh)

  implicit none

  integer, intent(in)  :: ndet, narr, iv, ih
  integer, intent(out), dimension(ndet,narr)    :: Lv, Lh
  real,    intent(out), dimension(ndet,narr)    :: VDet, HDet
  real,    intent(out), dimension(iv,ndet,narr) :: Yfov, Vfov
  real,    intent(out), dimension(ih,ndet,narr) :: Xfov, Hfov

  integer :: k
  real*8  :: rdum(ndet*narr)

C Open the file containing the FOV calibration data -- ascii text, double
C   precision storage
  open(unit=10,file='/home/jupiter/plan/teanby/mcs/FOVgreg/Master_FOV.dat',status='old')

C Read one row at a time
C Scroll through detector header label (Sections 1 - 3)
  do k = 1, 4
     read(10,*) rdum
  end do

C Read Section Vertical detector position (Section 4)
  VDet = reshape( rdum, (/ ndet, narr /) )

C Read Lengths of vertical response curves (Section 5), and convert to 
integers
  read(10,*) rdum
  Lv = nint( reshape( rdum, (/ ndet, narr /) ) )

C Read Vertical (elevation) angular axes (Section 6)
  do k = 1, iv
     read(10,*) rdum
     Yfov(k,:,:) = reshape( rdum, (/ ndet, narr /) )
  end do

C Read Vertical response curves (Section 7)
  do k = 1, iv
     read(10,*) rdum
     Vfov(k,:,:) = reshape( rdum, (/ ndet, narr /) )
  end do

C Read Horizontal detector position (Section 8)
  read(10,*) rdum
  HDet = reshape( rdum, (/ ndet, narr /) )

C Read Lengths of horizontal response curves (Section 9), and convert to 
integers 
  read(10,*) rdum
  Lh = nint( reshape( rdum, (/ ndet, narr /) ) )

C Read Horizontal (azimuth) angular axes (Section 10)
  do k = 1, ih
     read(10,*) rdum
     Xfov(k,:,:) = reshape( rdum, (/ ndet, narr /) )
  end do

C Read Horizontal response curves (Section 11)
  do k = 1, ih
     read(10,*) rdum
     Hfov(k,:,:) = reshape( rdum, (/ ndet, narr /) )
  end do
  
  close(10)

end subroutine FOV_ReadIn
