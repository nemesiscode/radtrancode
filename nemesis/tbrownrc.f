      subroutine tbrownrc(npro,press,T0,Teff,tau0,n,alpha,temp,
     &	dtempdx)
C     ********************************************************
C     Combination of radiative T-profile from Eddington Gray Approximation
C     and empirical lapse rate at depth. Based on Robinson and Catling (2012)
C
C     input variables:
C       npro		integer	Number of levels
C       press(npro)	real	pressures (atm)
C       T0		real	temperature at deepest pressure level (K)
C       Teff		real	radiative eqm temperature (K)
C       tau0		real	optical depth of deepest pressure level
C       n		 real	Coefficient of tau vs pressure
C       alpha		real	Correction coefficient for DALR
C
C     output variables
C       temp(npro)	real	Temperature profile (K)
C       dtempdx(npro,5)	real	dT/dx, where x is
C				(tau0,n,Teff,alpha,T0)
C
C     Pat Irwin		Adapted from code generated by Ryan Garland
C			and Jean-Loup Baudino	22/5/17
C
C     ********************************************************
      implicit none
      include '../radtran/includes/arrdef.f'
      real press(maxpro),tempradeqm(maxpro),tempconv(maxpro)
      real temp(maxpro),p0,T0,Teff,tau0,n,alpha,gamma,D,beta
      real alapse,rlapse,dtemp,dpress,tau(maxpro)
      real dtaudx(maxpro,2),dtempradeqmdx(maxpro,5)
      real dtempconvdx(maxpro,5),dtempdx(maxpro,5)
      real dbetadalpha,dtempradeqmdtau
      integer npro,i,k,iswitch

C     Initialise gradients
      do i=1,npro
       do k=1,5
        dtempradeqmdx(i,k)=0.
        dtempconvdx(i,k)=0.
        dtempdx(i,k)=0.
       enddo
      enddo

      p0=press(1)
C      p0=1.


      print*,'Check T0, Teff, tau0, n, alpha'
      print*,T0,Teff,tau0,n,alpha

C     For diatomic molecules Cv (per mole) = 3R/2 + R = 5R/2
C     Cp = Cv+R = 7R/2
C     Hence gamma = Cp/Cv = 7/5 = 1.4

      gamma=1.4 

C     Eddington radiative equilibrium coefficient
      D=1.5

C     For DALR - T=T0*(P/P0)^((gamma-1)/gamma). If there are condensibles then
C     the lapse rate might be less. Robinson and Catling (2012) suggest that 
C     a better approximation is T=T0*(P/P0)^(alpha*(gamma-1)/gamma), where 
C     alpha is a correction factor in the range (0.6 - 0.9)

      beta = alpha*(gamma-1.0)/gamma
      dbetadalpha = (gamma-1.0)/gamma

C     Calculate effective optical depth from space to pressure level
C     tau0 and n are all tunable. In simplest case n=1, for strong CIA n=2
C     Then calculate radiative eqm T-profile (tempradeqm) and convective
C     T-profile (tempconv)
      do i=1,npro
       tau(i) = tau0*(press(i)/p0)**n
       dtaudx(i,1)=(press(i)/p0)**n
       dtaudx(i,2)=tau(i)*alog(press(i)/p0)		
       tempradeqm(i)= Teff*(0.5+0.5*D*tau(i))**0.25
       dtempradeqmdx(i,3) = (0.5+0.5*D*tau(i))**0.25
       dtempradeqmdtau = 0.5*D*0.25*Teff*(0.5+0.5*D*tau(i))**(-0.75)
       do k=1,2
        dtempradeqmdx(i,k)=dtempradeqmdtau*dtaudx(i,k)
       enddo
       tempconv(i) = T0*(press(i)/p0)**beta
       dtempconvdx(i,4)= dbetadalpha*tempconv(i)*alog(press(i)/p0)
       dtempconvdx(i,5)= tempconv(i)/T0
C       print*,i,press(i),tau(i),tempradeqm(i),tempconv(i)
      enddo

      if(tempradeqm(npro).gt.tempconv(npro))then
       temp(npro)=tempradeqm(npro)
       do k=1,5
        dtempdx(npro,k)=dtempradeqmdx(npro,k)
       enddo
      else
       temp(npro)=tempconv(npro)
       do k=1,5
        dtempdx(npro,k)=dtempconvdx(npro,k)
       enddo
      endif
      iswitch=0
      do i=npro-1,1,-1
       dtemp = tempradeqm(i)-tempradeqm(i+1)
       dpress = press(i)-press(i+1)
       rlapse = dtemp/dpress
       alapse = beta*tempradeqm(i+1)/press(i+1)
       if(rlapse.le.alapse)then
        if(tempradeqm(i).gt.tempconv(i)) then 
         temp(i)=tempradeqm(i)
         do k=1,5
          dtempdx(i,k)=dtempradeqmdx(i,k)
         enddo
        else
         iswitch=1
         temp(i)=tempconv(i)
         do k=1,5
          dtempdx(i,k)=dtempconvdx(i,k)
         enddo
        endif
       else
C       Lapse rate of T_radeqm exceeds lapse rate, but temperature
C       greater than if we extrapolate deep temperature along lapse rate.
C       Limit dT/dp to not exceed assumed lapse rate
        if(iswitch.eq.0)then
         temp(i)=tempradeqm(i+1)+alapse*dpress
         do k=1,5
          dtempdx(i,k)=dtempradeqmdx(i+1,k)
         enddo
         dtempdx(i,4)=dtempdx(i,4)+(alapse/beta)*dpress*dbetadalpha         
        else
         temp(i)=tempconv(i)
         do k=1,5
          dtempdx(i,k)=dtempconvdx(i,k)
         enddo
        endif
       endif
       
C       print*,i,press(i),temp(i)
      enddo


       open(12,file='test.grad',status='unknown')
       write(12,*)npro
       do i=1,npro
        write(12,*)(dtempdx(i,k),k=1,5)
       enddo
       do i=1,npro
        write(12,*)press(i),tempconv(i),tempradeqm(i),temp(i)
       enddo
       close(12)
 
      return

      end
