************************************************************************
************************************************************************
C-----------------------------------------------------------------------
C_TITL:	REFINDEX.f
C
C_DESC:	Returns the real and imaginary parts of the index of refraction 
C	for several different species: H20, NH3, Tholins (for Titan),
C	Hydrazine, Methane, NH4SH -- further information can be found
C	within the respective subroutine headers.
C
C	The table lists indices in order of wavelength [microns], real,
C	and imaginary index.
C
C	Note that since FORTRAN calls pass only the pointers to arrays, 
C	the call to LOCATE supplies only the first nrows elements of
C	TABLE, and since arrays are stored as table(1,1), table(2,1), 
C	etc., then the call to LOCATE passes all the wavelengths only.
C
C_HIST:	Original version
C-----------------------------------------------------------------------


C-----------------------------------------------------------------------
C
C			SUBROUTINE H2O_REFIND
C
C	Returns the real and imaginary parts of the index of refraction 
C	of water cloud droplets. Supplied by Don Grainger and taken 
C	from Hale and Query (1973). Wavelengths are supplied in microns.
C	The table lists indices in order of wavelength, real, and 
C	imaginary index.
C
C       Note extra padded point at beginning and end.

C-----------------------------------------------------------------------

	subroutine h2o_refind(lambda, ncr, nci)

	implicit none
	integer		n
	parameter	(n=68)
	integer		I, J, k, m
	real	lambda, ncr, nci, table(n,3), tmp, frac

	DATA ((Table(J,I),I=1,3),J=1,50) /
     &   	0.100, 1.335, 1.00e-9,
     1		0.500, 1.335, 1.00e-9,
     2 		0.525, 1.334, 1.32e-9,
     3		0.550, 1.333, 1.96e-9,
     4 		0.575, 1.333, 3.60e-9,
     5 		0.600, 1.332, 1.09e-8,
     6 		0.625, 1.332, 1.39e-8,
     7 		0.650, 1.331, 1.64e-8,
     8 		0.675, 1.331, 2.23e-8,
     9 		0.700, 1.331, 3.35e-8,
     & 		0.725, 1.330, 9.15e-8,
     1 		0.750, 1.330, 1.56e-7,
     2 		0.775, 1.330, 1.48e-7,
     3 		0.800, 1.329, 1.25e-7,
     4 		0.825, 1.329, 1.82e-7,
     5 		0.850, 1.329, 2.93e-7,
     6 		0.875, 1.328, 3.91e-7,
     7 		0.900, 1.328, 4.86e-7,
     8 		0.925, 1.328, 1.06e-6,
     9 		0.950, 1.327, 2.93e-6,
     & 		0.975, 1.327, 3.48e-6,
     1 		1.000, 1.327, 2.89e-6,
     2 		1.200, 1.324, 9.89e-6,
     3 		1.400, 1.321, 1.38e-4,
     4 		1.600, 1.317, 8.55e-5,
     5 		1.800, 1.312, 1.15e-4,
     6 		2.000, 1.306, 1.10e-3,
     7 		2.200, 1.296, 2.89e-4,
     8 		2.400, 1.279, 9.56e-4,
     9 		2.600, 1.242, 3.17e-3,
     & 		2.650, 1.219, 6.70e-3,
     1 		2.700, 1.188, 1.90e-2,
     2 		2.750, 1.157, 5.90e-2,
     3 		2.800, 1.142, 1.15e-1,
     4 		2.850, 1.149, 1.85e-1,
     5 		2.900, 1.201, 2.68e-1,
     6 		2.950, 1.292, 2.98e-1,
     7 		3.000, 1.371, 2.72e-1,
     8 		3.050, 1.426, 2.40e-1,
     9 		3.100, 1.467, 1.92e-1,
     & 		3.150, 1.483, 1.35e-1,
     1 		3.200, 1.478, 9.24e-2,
     2 		3.250, 1.467, 6.10e-2,
     3 		3.300, 1.450, 3.68e-2,
     4 		3.350, 1.432, 2.61e-2,
     5 		3.400, 1.420, 1.95e-2,
     6 		3.450, 1.410, 1.32e-2,
     7 		3.500, 1.400, 9.40e-3,
     8 		3.600, 1.385, 5.15e-3,
     9 		3.700, 1.374, 3.60e-3/

	DATA ((Table(J,I),I=1,3),J=51,n) /
     & 		3.750, 1.372, 3.55e-3,
     1 		3.800, 1.364, 3.40e-3,
     2 		3.830, 1.358, 3.38e-3,
     3 		3.900, 1.357, 3.80e-3,
     4 		4.000, 1.351, 4.60e-3,
     5 		4.100, 1.346, 5.62e-3,
     6 		4.200, 1.342, 6.88e-3,
     7 		4.3, 1.338, 0.00845,
     8 		4.4, 1.334, 0.01030,
     9 		4.5, 1.332, 0.01340,
     & 		4.6, 1.330, 0.01470,
     1 		4.7, 1.330, 0.01570,
     2 		4.8, 1.330, 0.01500,
     3 		4.9, 1.328, 0.01370,
     4 		5.0, 1.325, 0.01240,
     5 		5.1, 1.322, 0.01110,
     6		5.2, 1.317, 0.01010,
     7		999.9, 1.317, 0.01010/


	if ((lambda.lt.table(1,1)).or.(lambda.gt.table(n,1))) then
		write (*,*) ' Wavelength range exceeded in H2O lookup'
		write (*,*) ' Lambda: ', lambda, ' Limits: ', 
     1			table(1,1), ' to', table(n,1)
		stop
	endif


	call locate (table, n, lambda, k)

        frac = (lambda - table(k,1))/(table(k+1,1)-table(k,1))

        ncr = table(k,2) + frac*(table(k+1,2)-table(k,2))
        nci = table(k,3) + frac*(table(k+1,3)-table(k,3))


	return

	end

************************************************************************
C-----------------------------------------------------------------------
C
C			SUBROUTINE NH3_REFIND
C
C	Returns the real and imaginary parts of the index of refraction 
C	of ammonia ice in the cubic phase. Data is taken from Martonchik
C	et al., Applied Optics 23, 541-547, 1984. Wavelengths are 
C	supplied in microns. The table lists indices in order of 
C	wavelength in inverse centimetres, real, and imaginary index.
C	Conversion from microns to cm-1 is made.
C
C-----------------------------------------------------------------------

	subroutine nh3_refind(lambda, ncr, nci)

	implicit none
	integer		n
	parameter	(n=298)
	integer		I, J, k, m
	real		lambda, ncr, nci, nu, table(n,3), tmp
        real          xtest,frac

	nu = 1.e4/lambda

	DATA ((Table(J,I),I=1,3),J=1,50) /
     &		50.0,		1.829,		1.592e-02,
     1		60.0,		1.853,		1.857e-02,
     2		70.0,		1.942,		3.410e-02,
     3		73.0,		1.976,		1.403e-01,
     4		76.0,		1.935,		2.464e-01,
     5		79.0,		1.775,		3.526e-01,
     6		80.0,		1.709,		2.785e-01,
     7		83.3,		1.653,		1.886e-01,
     8		86.7,		1.635,		9.874e-02,
     9		90.0,		1.676,		8.842e-03,
     &		100.0,		1.773,		7.958E-03, 
     1		110.0,		1.819,		1.157E-02,
     2		120.0,		1.867,		2.984e-02,
     3		123.3,		1.888,		4.438e-02,
     4		126.7,		1.911,		5.892e-02,
     5		130.0,		1.968,		7.346e-02,
     6		133.0,		2.001,		1.921e-01,
     7		136.0,		1.956,		3.107e-01,
     8		139.0,		1.800,		4.294e-01,
     9		140.0,		1.721,		3.922e-01,
     &		143.3,		1.612,		2.756e-01,
     1		146.7,		1.581,		1.590e-01,
     2		150.0,		1.628,		4.244e-02,
     3		160.0,		1.739,		3.979e-02,
     4 		170.0,		1.783,		4.213e-02,
     5		173.3,		1.794,		5.609e-02,
     6		176.7,		1.796,		7.004e-02,
     7		180.0,		1.783,		8.400e-02,
     8		183.3,		1.770,		6.856e-02,
     9		186.7,		1.771,		5.313e-02,
     &		190.0,		1.783,		3.769e-02,
     1		200.0,		1.816,		3.979e-02,
     2		210.0,		1.838,		4.168e-02,
     3		220.0,		1.862,		4.341e-02,
     4		230.0,		1.889,		4.844e-02,
     5		240.0,		1.918,		5.968e-02,
     6		243.3,		1.927,		6.525e-02,
     7		246.7,		1.935,		7.082e-02,
     8		250.0,		1.945,		7.639e-02,
     9		252.3,		1.951,		8.602e-02,
     &		254.7,		1.951,		9.565e-02,
     1		257.0,		1.941,		1.053e-01,
     2		258.0,		1.934,		9.875e-02,
     3		259.0,		1.933,		9.223e-02,
     4		260.0,		1.935,		8.570e-02,
     5		270.0,		1.979,		5.010e-02,
     6		280.0,		2.052,		4.547e-02,
     7		290.0,		2.138,		5.488e-02,
     8		300.0,		2.242,		7.958e-02,
     9		310.0,		2.385,		1.155e-01/

	DATA ((Table(J,I),I=1,3),J=51,100) /
     &		320.0,		2.580,		2.114e-01,
     1		330.0,		2.818,		4.099e-01,
     2		340.0,		3.107,		7.724e-01,
     3		343.3,		3.207,		1.045e+00,
     4		346.7,		3.226,		1.318E+00,
     5		350.0,		3.240,		1.592E+00,
     6		353.3,		3.177,		2.019E+00,
     7		356.7,		2.950,		2.446E+00,
     8		360.0,		2.516,		2.874e+00,
     9		361.0,		2.331,		2.939e+00,
     &		362.0,		2.149,		3.004e+00,
     1		363.0,		1.917,		3.069e+00,
     2		365.3,		1.477,		2.906e+00,
     3		367.7,		1.190,		2.744e+00,
     4		370.0,		0.958,		2.581e+00,
     5		373.3,		0.703,		2.321e+00,
     6		376.7,		0.529,		2.061e+00,
     7		380.0,		0.431,		1.801e+00,
     8		383.3,		0.377,		1.602e+00,
     9		386.7,		0.339,		1.403e+00,
     &		390.0,		0.353,		1.204e+00,
     1		393.3,		0.385,		1.088e+00,
     2		396.7,		0.398,		9.716e-01,
     3		400.0,		0.425,		8.555e-01,
     4		410.0,		0.520,		6.017e-01,
     5		420.0,		0.629,		4.358e-01,
     6		430.0,		0.715,		3.331e-01,
     7		440.0,		0.803,		2.170e-01,
     8		450.0,		0.900,		1.662e-01,
     9		460.0,		0.976,		1.332e-01,
     &		470.0,		1.036,		1.185e-01,
     1		480.0,		1.083,		1.028e-01,
     2		490.0,		1.127,		9.095e-02,
     3		500.0,		1.172,		8.276e-02,
     4		510.0,		1.227,		8.270e-02,
     5		513.3,		1.248,		9.849e-02,
     6		516.7,		1.262,		1.143e-01,
     7		520.0,		1.276,		1.301e-01,
     8		523.3,		1.284,		1.618e-01,
     9		526.7,		1.277,		1.935e-01,
     &		530.0,		1.254,		2.252e-01,
     1		540.0,		1.164,		1.916e-01,
     2		560.0,		1.170,		1.023e-01,
     3		580.0,		1.204,		6.860e-02,
     4		600.0,		1.229,		4.642e-02,
     5		620.0,		1.257,		2.567e-02,
     6		640.0,		1.286,		1.741e-02,
     7		660.0,		1.310,		1.567e-02,
     8		680.0,		1.325,		1.755e-02,
     9		700.0,		1.337,		1.478e-02/

	DATA ((Table(J,I),I=1,3),J=101,150) /
     &		720.0,		1.350,		1.216e-02,
     1		740.0,		1.361,		8.603e-03,
     2		760.0,		1.375,		7.330e-03,
     3		780.0,		1.387,		9.182e-03,
     4		800.0,		1.395,		1.093e-02,
     5		820.0,		1.405,		8.249e-03,
     6		840.0,		1.416,		7.579e-03,
     7		860.0,		1.427,		6.940e-03,
     8		870.0,		1.433,		6.860e-03,
     9		880.0,		1.439,		6.782e-03,
     &		890.0,		1.446,		6.259e-03,
     1		900.0,		1.454,		6.189e-03,
     2		910.0,		1.462,		6.121e-03,
     3		920.0,		1.471,		6.055e-03,
     4		930.0,		1.481,		5.990e-03,
     5		940.0,		1.493,		6.349e-03,
     6		950.0,		1.506,		7.120e-03,
     7		960.0,		1.522,		7.875e-03,
     8		970.0,		1.540,		9.024e-03,
     9		980.0,		1.563,		1.137e-02,
     &  	990.0,		1.590,		1.527e-02,
     1		1000.0,		1.628,		1.592e-02,
     2		1010.0,		1.682,		2.364e-02,
     3		1020.0,		1.760,		3.745e-02,
     4		1023.3,		1.796,		4.557e-02,
     5		1026.7,		1.838,		5.369e-02,
     6		1030.0,		1.897,		6.181e-02,
     7		1033.3,		1.967,		9.222e-02,
     8		1036.7,		2.048,		1.266e-01,
     9		1040.0,		2.191,		1.530e-01,
     & 		1043.3,		2.339,		3.294e-01,
     1		1046.7,		2.458,		5.057e-01,
     2		1050.0,		2.793,		6.821e-01,
     3		1052.3,		2.928,		1.459e+00,
     4		1054.7,		2.572,		2.235e+00,
     5		1057.0,		1.373,		3.011e+00,
     6		1058.0,		0.681,		2.508e+00,
     7		1059.0,		0.419,		2.005e+00,
     8		1060.0,		0.476,		1.501e+00,
     9		1063.3,		0.605,		1.249e+00,
     &		1066.7,		0.535,		9.963e-01,
     1		1070.0,		0.526,		7.437e-01,
     2		1073.3,		0.552,		5.818e-01,
     3		1076.7,		0.578,		4.198e-01,
     4		1080.0,		0.654,		2.579e-01,
     5		1083.3,		0.744,		1.963e-01,
     6		1086.7,		0.805,		1.346e-01,
     7		1090.0,		0.882,		7.301e-02,
     8		1100.0,		1.028,		7.234e-02,
     9		1110.0,		1.082,		5.520e-02/

	DATA ((Table(J,I),I=1,3),J=151,200) /
     &		1120.0,		1.129,		2.487e-02,
     1		1130.0,		1.175,		1.831e-02,
     2		1140.0,		1.204,		1.955e-02,
     3		1150.0,		1.225,		1.384e-02,
     4		1160.0,		1.244,		1.509e-02,
     5		1180.0,		1.270,		1.281e-02,
     6		1200.0,		1.289,		1.194e-02,
     7		1220.0,		1.301,		1.109e-02,
     8		1240.0,		1.313,		7.701e-03,
     9		1260.0,		1.322,		4.421e-03,
     &		1280.0,		1.335,		4.974e-03,
     1		1300.0,		1.343,		6.121e-03,
     2		1320.0,		1.351,		7.837e-03,
     3		1350.0,		1.361,		1.002e-02,
     4		1370.0,		1.366,		1.336e-02,
     5		1390.0,		1.371,		1.889e-02,
     6		1400.0,		1.370,		2.558e-02,
     7		1420.0,		1.362,		2.073e-02,
     8		1440.0,		1.362,		1.824e-02,
     9		1460.0,		1.369,		1.254e-02,
     &		1500.0,		1.374,		2.122e-02,
     1		1550.0,		1.382,		1.694e-02,
     2		1560.0,		1.387,		1.938e-02,
     3		1570.0,		1.391,		2.382e-02,
     4		1580.0,		1.392,		3.425e-02,
     5		1590.0,		1.385,		4.254e-02,
     6		1600.0,		1.378,		4.178e-02,
     7		1620.0,		1.371,		4.224e-02,
     8		1630.0,		1.369,		4.247e-02,
     9		1640.0,		1.366,		4.852e-02,
     &		1650.0,		1.342,		6.270e-02,
     1		1660.0,		1.325,		2.301e-02,
     2		1670.0,		1.339,		4.289e-03,
     3		1680.0,		1.352,		2.842e-03,
     4		1690.0,		1.358,		2.825e-03,
     5		1700.0,		1.362,		3.043e-03,
     6		1750.0,		1.373,		2.728e-03,
     7		1800.0,		1.380,		2.874e-03,
     8		1850.0,		1.387,		6.452e-03,
     9		1890.0,		1.383,		1.389e-02,
     &		1900.,		1.381,		1.256e-02, 
     1		2000.,		1.385, 		3.183e-03, 
     2		2100.,		1.390, 		1.705e-03, 
     3		2200.,		1.394, 		1.266e-03, 
     4		2300.,		1.398, 		6.920e-04,
     5		2400.,		1.401,		6.631e-04,
     6		2500.,		1.404,		6.366e-04,
     7		2600.,		1.406,		6.121e-04,
     8		2700.,		1.409,		5.895e-04,
     9		2800.,		1.412,		5.684e-04/

	DATA ((Table(J,I),I=1,3),J=201,250) /
     &		2900.,		1.417,		5.488e-04,
     1		2950.,		1.419,		6.744e-04,
     2		3000.,		1.423,		9.284e-04,
     3		3050.,		1.428,		1.305e-03,
     4		3100.,		1.434,		2.310e-03,
     5		3120.,		1.437,		2.806e-03,
     6		3140.,		1.441,		3.295e-03,
     7		3160.,		1.446,		4.281e-03,
     8		3180.,		1.454,		5.756e-03,
     9		3200.,		1.462,		1.616e-02,
     &		3220.,		1.458,		2.125e-02,
     1		3240.,		1.469,		2.358e-02,
     2		3260.,		1.479,		3.662e-02,
     3		3270.,		1.480,		4.867e-02,
     4		3280.,		1.477,		5.580e-02,
     5		3300.,		1.470,		5.787e-02,
     6		3310.,		1.476,		5.289e-02,
     7		3320.,		1.489,		5.034e-02,
     8		3330.,		1.511,		5.018e-02,
     9		3340.,		1.551,		5.242e-02,
     &		3350.,		1.647,		6.651e-02,
     1		3360.,		1.789,		2.368e-01,
     2		3362.3,		1.821,		3.706e-01,
     3		3364.7,		1.782,		5.044e-01,
     4		3367.0,		1.638,		6.381e-01,
     5		3367.3,		1.626,		5.987e-01,
     6		3367.7,		1.633,		5.592e-01,
     7		3368.0,		1.622,		5.198e-01,
     8		3368.7,		1.681,		5.669e-01,
     9		3369.3,		1.682,		6.141e-01,
     &		3370.,		1.678,		6.612e-01,
     1		3371.3,		1.634,		7.946e-01,
     2		3372.7,		1.516,		9.280e-01,
     3		3374.,		1.267,		1.061e-01,
     4		3376.,		0.948,		8.331e-01,
     5		3378.,		0.832,		6.049e-01,
     6		3380.,		0.850,		3.767e-01,
     7		3383.3,		0.922,		2.668e-01,
     8		3386.7,		0.951,		1.569e-01,
     9		3390.0,		1.024,		4.695e-02,
     &		3400.,		1.177,		9.596e-03,
     1          3440.,		1.313,		6.940e-03,
     2		3500.,		1.351,		4.547e-03,
     3		3540.,		1.361,		5.395e-03,
     4		3600.,		1.372,		1.105e-03,
     5		3700.,		1.382,		1.398e-03,
     6		3800.,		1.387,		1.047e-03,
     7		3900.,		1.391,		8.162e-04,
     8		4000.,		1.393,		4.974e-04,
     9		4100.,		1.396,		5.046e-04/

	DATA ((Table(J,I),I=1,3),J=251,n) /
     &		4200.,		1.398,		5.305e-04,
     1		4300.,		1.400,		1.536e-03,
     2		4400.,		1.403,		2.170e-03,
     3		4460.,		1.403,		1.303e-02,
     4		4470.,		1.393,		1.620e-02,
     5		4480.,		1.390,		4.085e-03,
     6		4500.,		1.394,		1.768e-03,
     7		4600.,		1.399,		3.287e-04,
     8		4700.,		1.401,		3.386e-04,
     9		4800.,		1.402,		3.979e-04,
     &		4900.,		1.404,		1.137e-03,
     1		5000.,		1.4,		6.207e-03,
     2		5100.,		1.401,		4.213e-04,
     3		5200.,		1.402,		4.438e-04,
     4		5300.,		1.403,		2.402e-04,
     5		5400.,		1.404,		1.474e-04,
     6		5500.,		1.404,		1.157e-04,
     7		5600.,		1.405,		7.105e-05,
     8		5800.,		1.405,		6.860e-05,
     9		6000.,		1.406,		1.857e-04,
     &		6100.,		1.406,		2.218e-04,
     1		6200.,		1.407,		1.155e-04,
     2		6300.,		1.407,		6.316e-05,
     3		6400.,		1.408,		1.368e-04,
     4		6500.,		1.407,		2.693e-04,
     5		6600.,		1.407,		2.653e-04,
     6		6700.,		1.407,		1.306e-04,
     7		6800.,		1.408,		8.192e-05,
     8		6840.,		1.408,		5.817e-05,
     9		14976.7,	1.423,		3.963e-05,
     &		23113.3,	1.449,		2.109e-05,
     1		31250.0,	1.488,		2.546e-06,
     2		33333.0,	1.505,		2.387e-06,
     3		35714.0,	1.517,		2.228e-06,
     4		38462.0,	1.544,		2.069e-06,
     5		41667.0,	1.582,		1.910e-06,
     6		46729.0,	1.677,		1.703e-06,
     7		47619.0,	1.707,		1.671e-06,
     8		50000.0,	1.792,		1.592e-06,
     9		50633.0,	1.823,		3.143e-05,
     &		51282.0,	1.870,		7.759e-05,
     1		52632.0,	2.010,		1.210e-03,
     2		53192.0,	2.143,		1.257e-02,
     3		54054.0,	2.251,		2.944e-01,
     4		55556.0,	2.082,		6.589e-01,
     5		58824.0,	1.739,		6.683e-01,
     6		66667.0,	1.522,		5.897e-01,
     7		71629.0,	1.560,		5.504e-01/


	if ((nu.lt.table(1,1)).or.(nu.gt.table(n,1))) then
		write (*,*) ' Wavenumber range exceeded in NH3 lookup'
		write (*,*) ' Nu: ', nu, ' Limits: ', 
     1			table(1,1), ' to', table(n,1)
		stop
	endif

	call locate (table, n, nu, k)

        frac = (nu - table(k,1))/(table(k+1,1)-table(k,1))

        ncr = table(k,2) + frac*(table(k+1,2)-table(k,2))
        nci = table(k,3) + frac*(table(k+1,3)-table(k,3))

	return

	end

************************************************************************
C-----------------------------------------------------------------------
C
C			SUBROUTINE THOLIN_REFIND
C
C	Returns the real and imaginary parts of the index of refraction 
C       of Titan tholins from Khare et al. (1984) Icarus, 60, 127.
C	Wavelengths are supplied in microns.
C	The table lists indices in order of wavelength, real, and 
C	imaginary index.
C
C-----------------------------------------------------------------------

	subroutine tholin_refind(lambda, ncr, nci, scalef)

	implicit none
	integer		n
	parameter	(n=90)
	integer		I, J, k, m,jj
	real	lambda, ncr, nci, table(n,3), tmp,frac,scalef

	DATA ((Table(J,I),I=1,3),J=1,50) /
     &	     0.0207, 0.920, 4.9e-2,
     1	     0.0312, 0.850, 1.4e-1,
     2	     0.0415, 0.802, 3.1e-1,
     3	     0.0449, 0.812, 3.8e-1,
     4	     0.0588, 0.963, 6.2e-1,
     5	     0.0785, 1.33, 7.7e-1,
     6	     0.0800, 1.37, 7.7e-1,
     7	     0.0925, 1.58, 6.7e-1,
     8	     0.1016, 1.67, 5.8e-1,
     9	     0.1097, 1.72, 5.0e-1,
     & 	     0.1159, 1.75, 4.3e-1, 
     1       0.1181, 1.75, 4.0e-1,
     2       0.1215, 1.74, 3.7e-1,
     3	     0.1362, 1.70, 2.7e-1,
     4       0.1631, 1.65, 2.4e-1,
     5       0.1968, 1.66, 2.2e-1,
     6	     0.2384, 1.68, 2.1e-1,
     7	     0.2638, 1.68, 1.8e-1,
     8	     0.2952, 1.66, 1.5e-1,
     9       0.3263, 1.64, 1.3e-1,
     & 	     0.3542, 1.63, 1.1e-1,
     1	     0.3874, 1.66, 9.1e-2,
     2	     0.4133, 1.69, 7.6e-2,
     3	     0.4428, 1.72, 6.0e-2, 
     4	     0.5635, 1.70, 2.3e-2,
     5	     0.6888, 1.68, 8.8e-3,
     6       0.8731, 1.66, 2.4e-3,
     7       1.016, 1.65, 1.0e-3,
     8       1.148, 1.65, 6.4e-4,
     9       1.192, 1.65, 5.2e-4,
     &       1.357, 1.64, 4.2e-4,
     1	     1.381, 1.64, 4.1e-4,
     2       1.802, 1.64, 4.0e-4,
     3       1.813, 1.64, 4.2e-4,
     4	     1.823, 1.64, 4.4e-4, 
     5       1.873, 1.63, 5.2e-4,
     6	     2.019, 1.63, 7.2e-4,
     7       2.214, 1.63, 8.9e-4, 
     8       2.393, 1.62, 8.0e-4,
     9       2.403, 1.62, 8.5e-4,
     &       2.422, 1.62, 1.2e-3,
     1       2.695, 1.60, 4.1e-3,
     2       2.743, 1.59, 1.1e-2,
     3       2.818, 1.58, 2.4e-2,
     4       2.938, 1.59, 6.0e-2,
     5       3.009, 1.61, 7.5e-2,
     6	     3.246, 1.65, 5.6e-2,
     7	     3.463, 1.65, 3.5e-2,
     8	     3.668, 1.65, 2.1e-2,
     9	     3.948, 1.64, 1.3e-2/

	DATA ((Table(J,I),I=1,3),J=51,n) /
     &	     4.217, 1.63, 1.0e-2,
     1	     4.428, 1.61, 1.1e-2,
     2	     4.492, 1.61, 1.4e-2,
     3	     4.592, 1.61, 2.8e-2,
     4	     4.626, 1.62, 2.7e-2,
     5	     4.881, 1.61, 1.0e-2,
     6	     5.166, 1.58, 7.6e-3,
     7	     5.253, 1.58, 8.7e-3,
     8	     5.438, 1.55, 1.1e-2,
     9	     5.740, 1.48, 2.9e-2,
     &	     5.848, 1.44, 7.0e-2, 
     1	     5.961, 1.43, 1.5e-1,
     2	     6.326, 1.58, 2.8e-1,
     3	     6.457, 1.64, 2.6e-1,
     4	     6.666, 1.69, 2.2e-1,
     5	     7.044, 1.69, 1.7e-1,
     6	     7.653, 1.72, 1.3e-1,
     7	     8.731, 1.71, 9.2e-2,
     8	     10.51, 1.67, 7.5e-2,
     9	     11.07, 1.66, 7.9e-2,
     &	     11.70, 1.64, 9.7e-2,
     1	     12.91, 1.67, 1.4e-1,
     2	     14.42, 1.67, 1.7e-1,
     3	     17.71, 1.74, 2.1e-1,
     4	     18.23, 1.76, 2.1e-1,
     5	     22.14, 1.80, 1.8e-1,
     6	     31.00, 1.81, 1.4e-1,
     7	     36.46, 1.81, 1.5e-1,
     8	     56.35, 1.86, 1.9e-1,
     9	     81.57, 1.93, 2.1e-1,
     &	     121.5, 2.02, 1.9e-1,
     1	     140.9, 2.03, 1.6e-1,
     2	     172.2, 2.04, 1.6e-1,
     3	     229.6, 2.07, 1.4e-1,
     4	     387.4, 2.12, 1.0e-1,
     5	     563.5, 2.15, 7.0e-2,
     6	     688.8, 2.16, 4.7e-2,
     7	     774.9, 2.16, 2.9e-2,
     8	     850.0, 2.17, 1.0e-2,
     9	     920.0, 2.17, 3.0e-3/


	if ((lambda.lt.table(1,1)).or.(lambda.gt.table(n,1))) then
		write (*,*) ' Wavelength range exceeded in',
     1                     ' tholin lookup'
		write (*,*) ' Lambda: ', lambda, ' Limits: ', 
     1			table(1,1), ' to', table(n,1)
		stop
	endif

C calls the interpolation to find the exact refractive index at the 
C wavelength required:

	call locate (table, n, lambda, k)
        frac = (lambda - table(k,1))/(table(k+1,1)-table(k,1))	

        ncr = table(k,2) + frac*(table(k+1,2)-table(k,2))
        nci = table(k,3) + frac*(table(k+1,3)-table(k,3))

C there is an optional scaling factor (see main subroutine) allowed
C for tholin imag. ref. ind. to make it fit Titan haze more exactly.
	if (scalef.eq.0.0) then 
	   scalef = 1.0
	endif
	nci = nci * scalef

	return

	end


************************************************************************
C-----------------------------------------------------------------------
C
C			SUBROUTINE HYDRA_REFIND
C
C	Returns the real and imaginary parts of the index of refraction 
C       of Hydrazine
C
C	Wavelengths are supplied in microns.
C	The table lists indices in order of wavelength, real, and 
C	imaginary index.
C
C-----------------------------------------------------------------------

	subroutine hydra_refind(lambda, ncr, nci)

	implicit none
	integer		n
	parameter	(n=239)
	integer		I, J, k, m,jj
	real	lambda, ncr, nci, table(n,3), tmp,frac

C       Packed with extra point at beginning and end

	DATA ((Table(J,I),I=1,3),J=1,50) /
     &   0.50000,   1.51000,   0.00520000,
     1   2.50000,   1.51000,   0.00520000,
     2   2.52504,   1.51100,   0.00380000,
     3   2.55050,   1.51100,   0.00880000,
     4   2.57712,   1.51100,   0.0101000,
     5   2.60365,   1.50500,   0.00340000,
     6   2.63140,   1.50700,   0.00930000,
     7   2.63809,   1.50900,   0.00420000,
     8   2.64482,   1.50800,   0.00750000,
     9   2.64550,   1.51000,   0.00700000,
     &   2.65226,   1.50900,   0.00500000,
     1   2.65906,   1.50800,   0.00350000,
     2   2.66658,   1.50700,   0.00280000,
     3   2.67345,   1.50800,   0.00300000,
     4   2.68037,   1.50600,   0.00270000,
     5   2.68801,   1.50600,   0.00350000,
     6   2.69500,   1.50200,   0.00510000,
     7   2.70202,   1.50400,   0.00730000,
     8   2.70978,   1.50500,   0.00350000,
     9   2.71688,   1.50600,   0.00890000,
     &   2.72474,   1.50400,   0.00520000,
     1   2.73191,   1.49900,   0.00380000,
     2   2.73913,   1.50200,   0.00370000,
     3   2.74711,   1.50100,   0.00370000,
     4   2.75440,   1.49700,   0.0131000,
     5   2.76174,   1.50100,   0.0134000,
     6   2.76985,   1.49900,   0.00760000,
     7   2.77728,   1.49700,   0.00410000,
     8   2.78548,   1.49700,   0.00610000,
     9   2.79298,   1.49700,   0.00450000,
     &   2.80052,   1.49600,   0.00330000,
     1   2.80887,   1.49600,   0.00460000,
     2   2.81650,   1.49700,   0.00820000,
     3   2.82416,   1.49300,   0.00400000,
     4   2.83265,   1.48800,   0.00520000,
     5   2.84041,   1.49200,   0.0106000,
     6   2.84899,   1.48600,   0.00370000,
     7   2.85684,   1.48800,   0.00870000,
     8   2.86474,   1.48500,   0.00590000,
     9   2.87346,   1.48300,   0.00900000,
     &   2.88145,   1.48300,   0.00690000,
     1   2.88948,   1.47800,   0.00840000,
     2   2.89837,   1.47900,   0.00880000,
     3   2.90649,   1.47700,   0.0108000,
     4   2.91465,   1.47200,   0.00760000,
     5   2.91958,   1.46700,   0.00650000,
     6   2.92369,   1.46800,   0.00760000,
     7   2.92782,   1.46400,   0.00240000,
     8   2.93196,   1.46100,   0.00900000,
     9   2.93611,   1.46000,   0.00840000/

	DATA ((Table(J,I),I=1,3),J=51,100) /
     &   2.94111,   1.45700,   0.0118000,
     1   2.94528,   1.45400,   0.0137000,
     2   2.94947,   1.45500,   0.00810000,
     3   2.95367,   1.45500,   0.0116000,
     4   2.95789,   1.44600,   0.00550000,
     5   2.96295,   1.44300,   0.00320000,
     6   2.96719,   1.43200,   0.00150000,
     7   2.97144,   1.42600,   0.00460000,
     8   2.97571,   1.42000,   0.00520000,
     9   2.97999,   1.40800,   0.00230000,
     &   2.98427,   1.39200,   0.00880000,
     1   2.98943,   1.37900,   0.0121000,
     2   2.99375,   1.36400,   0.0112000,
     3   2.99547,   1.35100,   0.0154000,
     4   2.99721,   1.34200,   0.0188000,
     5   3.00068,   1.32000,   0.0246000,
     6   3.00242,   1.30600,   0.0298000,
     7   3.00416,   1.28300,   0.0403000,
     8   3.00590,   1.26700,   0.0537000,
     9   3.00764,   1.24000,   0.0729000,
     &   3.00938,   1.21700,   0.105800,
     1   3.01201,   1.19900,   0.179400,
     2   3.01375,   1.21500,   0.239800,
     3   3.01551,   1.25700,   0.281200,
     4   3.01726,   1.30500,   0.295900,
     5   3.01902,   1.33900,   0.287500,
     6   3.02078,   1.35500,   0.273000,
     7   3.02255,   1.34400,   0.264300,
     8   3.02431,   1.32800,   0.273000,
     9   3.02607,   1.30600,   0.303500,
     &   3.02696,   1.29600,   0.326600,
     1   3.02783,   1.28800,   0.360400,
     2   3.02961,   1.30100,   0.452900,
     3   3.03050,   1.33200,   0.509200,
     4   3.03138,   1.38500,   0.560200,
     5   3.03226,   1.45900,   0.592500,
     6   3.03315,   1.54000,   0.596100,
     7   3.03581,   1.72600,   0.502600,
     8   3.03759,   1.78800,   0.406300,
     9   3.03938,   1.81100,   0.304400,
     &   3.04116,   1.79000,   0.221700,
     1   3.04295,   1.76000,   0.173800,
     2   3.04472,   1.73000,   0.138100,
     3   3.04651,   1.70100,   0.119700,
     4   3.04831,   1.68200,   0.108500,
     5   3.05190,   1.65200,   0.0912000,
     6   3.05550,   1.62400,   0.0811000,
     7   3.05910,   1.61200,   0.0719000,
     8   3.06271,   1.59600,   0.0751000,
     9   3.06634,   1.58600,   0.0669000/

	DATA ((Table(J,I),I=1,3),J=101,150) /
     &   3.06996,   1.57800,   0.0738000,
     1   3.07360,   1.57900,   0.0694000,
     2   3.07725,   1.56900,   0.0576000,
     3   3.08091,   1.56500,   0.0582000,
     4   3.08457,   1.55700,   0.0534000,
     5   3.08825,   1.54500,   0.0495000,
     6   3.09194,   1.53900,   0.0436000,
     7   3.09562,   1.53100,   0.0399000,
     8   3.09932,   1.51900,   0.0435000,
     9   3.10304,   1.50300,   0.0384000,
     &   3.10490,   1.48900,   0.0376000,
     1   3.10861,   1.46800,   0.0433000,
     2   3.11329,   1.43900,   0.0577000,
     3   3.11702,   1.40800,   0.0745000,
     4   3.12078,   1.36300,   0.119100,
     5   3.12454,   1.33700,   0.208800,
     6   3.12548,   1.33600,   0.237200,
     7   3.12643,   1.33900,   0.270100,
     8   3.12737,   1.34700,   0.303800,
     9   3.12830,   1.35900,   0.339100,
     &   3.12925,   1.38200,   0.384900,
     1   3.13019,   1.42000,   0.426100,
     2   3.13115,   1.47400,   0.457200,
     3   3.13209,   1.53800,   0.475500,
     4   3.13304,   1.60700,   0.468600,
     5   3.13398,   1.66600,   0.442500,
     6   3.13492,   1.71200,   0.405500,
     7   3.13588,   1.74500,   0.362500,
     8   3.13682,   1.76500,   0.316300,
     9   3.13872,   1.76700,   0.234400,
     &   3.14062,   1.74400,   0.180800,
     1   3.14253,   1.71700,   0.152300,
     2   3.14444,   1.69200,   0.139800,
     3   3.14635,   1.67200,   0.142100,
     4   3.14825,   1.66900,   0.156600,
     5   3.15016,   1.69200,   0.165000,
     6   3.15112,   1.70400,   0.155300,
     7   3.15207,   1.71300,   0.147900,
     8   3.15400,   1.72400,   0.114600,
     9   3.15592,   1.71500,   0.0930000,
     &   3.15784,   1.70300,   0.0715000,
     1   3.15977,   1.68700,   0.0623000,
     2   3.16170,   1.67900,   0.0610000,
     3   3.16362,   1.67200,   0.0553000,
     4   3.16846,   1.65700,   0.0437000,
     5   3.17233,   1.65000,   0.0404000,
     6   3.17622,   1.63600,   0.0389000,
     7   3.18012,   1.63000,   0.0337000,
     8   3.18401,   1.62400,   0.0316000,
     9   3.19481,   1.62000,   0.0302000/

	DATA ((Table(J,I),I=1,3),J=151,200) /
     &   3.20468,   1.60800,   0.0289000,
     1   3.21462,   1.60200,   0.0242000,
     2   3.22561,   1.59600,   0.0225000,
     3   3.23568,   1.59200,   0.0217000,
     4   3.24580,   1.58800,   0.0232000,
     5   3.25702,   1.58500,   0.0167000,
     6   3.26728,   1.57900,   0.0157000,
     7   3.27865,   1.58000,   0.0175000,
     8   3.28904,   1.57300,   0.0168000,
     9   3.29950,   1.57300,   0.0155000,
     &   3.31109,   1.57300,   0.0135000,
     1   3.32170,   1.57000,   0.0150000,
     2   3.33238,   1.56300,   0.0172000,
     3   3.34419,   1.56200,   0.0153000,
     4   3.35502,   1.55900,   0.0168000,
     5   3.36045,   1.55800,   0.0122000,
     6   3.36699,   1.55500,   0.0136000,
     7   3.37247,   1.55900,   0.0186000,
     8   3.37797,   1.55900,   0.0183000,
     9   3.38348,   1.55900,   0.0199000,
     &   3.38900,   1.56400,   0.0242000,
     1   3.39455,   1.55600,   0.0273000,
     2   3.39455,   1.55600,   0.0273000,
     3   3.40123,   1.56300,   0.0281000,
     4   3.40682,   1.56700,   0.0302000,
     5   3.41242,   1.56800,   0.0233000,
     6   3.41804,   1.57200,   0.0189000,
     7   3.42368,   1.57100,   0.0162000,
     8   3.43048,   1.57100,   0.0141000,
     9   3.43617,   1.56800,   0.0153000,
     &   3.44187,   1.57200,   0.0121000,
     1   3.44759,   1.57200,   0.0129000,
     2   3.47182,   1.56400,   0.00870000,
     3   3.49641,   1.56300,   0.00180000,
     4   3.52015,   1.56100,   0.00590000,
     5   3.54542,   1.55600,   0.00150000,
     6   3.57106,   1.55400,   0.00310000,
     7   3.59707,   1.55300,   0.00200000,
     8   3.62219,   1.55000,   0.00270000,
     9   3.64896,   1.55200,   0.00140000,
     &   3.67612,   1.54800,   0.00320000,
     1   3.70369,   1.54800,   0.00150000,
     2   3.73034,   1.54600,   0.00360000,
     3   3.75873,   1.54400,   0.00170000,
     4   3.78756,   1.54500,   0.00750000,
     5   3.81544,   1.54400,   0.00220000,
     6   3.84515,   1.54300,   0.00360000,
     7   3.87532,   1.54200,   0.00390000,
     8   3.90598,   1.54200,   0.00340000,
     9   3.93561,   1.54000,   0.00210000/

	DATA ((Table(J,I),I=1,3),J=201,n) /
     &   3.96723,   1.54100,   0.00350000,
     1   3.99936,   1.54100,   0.00170000,
     2   4.03201,   1.53900,   0.00230000,
     3   4.06362,   1.53700,   0.00180000,
     4   4.09734,   1.53800,   0.00440000,
     5   4.13162,   1.53700,   0.00230000,
     6   4.16648,   1.53800,   0.00510000,
     7   4.20023,   1.53700,   0.00320000,
     8   4.23626,   1.53600,   0.000900000,
     9   4.27292,   1.53600,   0.00220000,
     &   4.31021,   1.53600,   0.00320000,
     1   4.34633,   1.53400,   0.000900000,
     2   4.38493,   1.53400,   0.000900000,
     3   4.42421,   1.53300,   0.00150000,
     4   4.46421,   1.53100,   0.00220000,
     5   4.50298,   1.53500,   0.00450000,
     6   4.54442,   1.53300,   0.00300000,
     7   4.58663,   1.53000,   0.00580000,
     8   4.62963,   1.53100,   0.00290000,
     9   4.67133,   1.53100,   0.00370000,
     &   4.71594,   1.53000,   0.000500000,
     1   4.76141,   1.53000,   0.00120000,
     2   4.80554,   1.52800,   0.00310000,
     3   4.85277,   1.52800,   0.00130000,
     4   4.90093,   1.52500,   0.00360000,
     5   4.95005,   1.52800,   0.00420000,
     6   4.99778,   1.52600,   0.00320000,
     7   5.02439,   1.52300,   0.00280000,
     8   5.04887,   1.52600,   0.00320000,
     9   5.07604,   1.52600,   0.00600000,
     &   5.10103,   1.52700,   0.00530000,
     1   5.12623,   1.52600,   0.00110000,
     2   5.15427,   1.52800,   0.00210000,
     3   5.18001,   1.52400,   0.00360000,
     4   5.20597,   1.52500,   0.00160000,
     5   5.23492,   1.52400,   0.00230000,
     6   5.26144,   1.52300,   0.000300000,
     7   5.28832,   1.52400,   0.00170000,
     8   6.00000,   1.52400,   0.00170000/


	if ((lambda.lt.table(1,1)).or.(lambda.gt.table(n,1))) then
		write (*,*) ' Wavelength range exceeded in',
     1                     ' hydrazine lookup'
		write (*,*) ' Lambda: ', lambda, ' Limits: ', 
     1			table(1,1), ' to', table(n,1)
		stop
	endif

C calls the interpolation to find the exact refractive index at the 
C wavelength required:

	call locate (table, n, lambda, k)
        frac = (lambda - table(k,1))/(table(k+1,1)-table(k,1))	

        ncr = table(k,2) + frac*(table(k+1,2)-table(k,2))
        nci = table(k,3) + frac*(table(k+1,3)-table(k,3))

	return

	end


************************************************************************
C-----------------------------------------------------------------------
C
C			SUBROUTINE METHANE_REFIND
C
C	Returns the real and imaginary parts of the index of refraction 
C	of methane ice. Data is similar to that published by Martonchik and 
C       Orton (1994) 
C       Wavelengths are supplied in wavenumbers. 
C       The table lists indices in order of 
C	wavenumber in inverse centimetres, real, and imaginary index.
C
C-----------------------------------------------------------------------

	subroutine methane_refind(lambda, ncr, nci)

	implicit none
	integer		n
	parameter	(n=30)
	integer		I, J, k, m
	real		lambda, ncr, nci, nu, table(n,3), tmp, frac

	nu = 1.e4/lambda

	DATA ((Table(J,I),I=1,3),J=1,n) /
     &	 160.0, 1.317, 	2.58e-3,	
     1	 275.0, 1.316, 	7.472e-4,	
     2	1297.0, 1.829, 	5.086e-1,	
     3	1300.0, 1.265, 	9.598e-1,	
     4	1302.8, 0.826, 	4.988e-1,	
     5	2805.0, 1.321, 	2.57e-3,	
     6	2820.0, 1.319, 	4.574e-3,	
     7	2830.0, 1.318, 	2.877e-3,	
     8	3002.5, 1.450, 	1.063e-1,	
     9	3010.0, 1.339, 	2.564e-1,	
     &	3016.5, 1.191, 	1.432e-1,	
     1	4200.0, 1.316, 	5.547e-3,	
     2	4203.0, 1.312, 	9.199e-3,	
     3	4207.5, 1.306, 	5.058e-3,	
     4	4293.0, 1.314, 	3.096e-3,	
     5	4303.0, 1.311, 	6.189e-3,	
     6	4315.0, 1.307, 	3.453e-3,	
     7	5567.0, 1.311, 	1.807e-4,	
     8	5602.0, 1.311, 	8.213e-5,	
     9	5802.0, 1.311, 	2.446e-4,	
     &	5993.0, 1.311, 	4.737e-4,	
     1	7082.0, 1.312, 	2.368e-5,	
     2	7131.0, 1.312, 	3.642e-5,	
     3	7220.0, 1.312, 	9.073e-6,	
     4	7294.0, 1.312, 	1.828e-5,	
     5	7483.0, 1.312, 	5.023e-5,	
     6	8587.0, 1.313, 	4.577e-5,	
     7	8784.0, 1.313, 	1.900e-5,	
     8 10000.0, 1.313, 	0.000000,
     9 50000.0, 1.313,  0.000000/

	if ((nu.lt.table(1,1)).or.(nu.gt.table(n,1))) then
		write (*,*) ' Wavenumber range exceeded in CH4 lookup'
		write (*,*) ' Nu: ', nu, ' Limits: ', 
     1			table(1,1), ' to', table(n,1)
		stop
	endif
	call locate (table, n, nu, k)

        frac = (nu - table(k,1))/(table(k+1,1)-table(k,1))

        ncr = table(k,2) + frac*(table(k+1,2)-table(k,2))
        nci = table(k,3) + frac*(table(k+1,3)-table(k,3))

	return

	end
	


************************************************************************
C-----------------------------------------------------------------------
C
C			SUBROUTINE H2SO4_REFIND
C
C	Returns the real and imaginary parts of the index of refraction 
C	of concentrated sulphuric acid with different concentrations. 
C       Data is from Palmer and Williams 1975.
C       Wavelengths are supplied in microns
C       The table lists indices in order of 
C	wavelength, real, and imaginary index for three different
C       acid concentrations: 75, 85 and 95%
C
C-----------------------------------------------------------------------

	subroutine h2so4_refind(lambda, ncr, nci, xconc)

	implicit none
	integer		n
	parameter	(n=227)
	integer		I, J, k, m
	real		lambda, ncr, nci, nu, table(n,7), tmp, frac
        real		xr(3),xi(3),xp(3),x1,xconc
        data (xp(j),j=1,3) / 75.,85.,96./
        character*100   ipfile,buffer

        ipfile='palmer_williams_wl.dat'

        call datarchive(ipfile)

        open(55,file=ipfile,status='old')
        read(55,1)buffer
        read(55,1)buffer
1       format(a)   
        do i=1,n
         read(55,*)(table(i,j),j=1,7)
        enddo        
        close(55)


	if ((lambda.lt.table(1,1)).or.(lambda.gt.table(n,1))) then
		write (*,*) ' Wavelength range exceeded in H2SO4 lookup'
		write (*,*) ' lambda: ', lambda, ' Limits: ', 
     1			table(1,1), ' to', table(n,1)
		stop
	endif

	call locate (table, n, lambda, k)

        frac = (lambda - table(k,1))/(table(k+1,1)-table(k,1))
       
        do i=1,3
          j=2+2*(i-1)
          xr(i)=table(k,j) + frac*(table(k+1,j)-table(k,j))
          j=3+2*(i-1)
          xi(i)=table(k,j) + frac*(table(k+1,j)-table(k,j))
        enddo


        x1=xconc
        if(xconc.lt.xp(1))x1=xp(1)
        if(xconc.gt.xp(3))x1=xp(3)

        call locate (xp, 3, x1, k)

        frac = (x1-xp(k))/(xp(k+1)-xp(k))

        ncr = xr(k) + frac*(xr(k+1)-xr(k))
        nci = xi(k) + frac*(xi(k+1)-xi(k))

	return

	end
	


************************************************************************
C-----------------------------------------------------------------------
C
C			SUBROUTINE MARS_REFIND
C
C	Returns the real and imaginary parts of the index of refraction 
C	of Mars basalts from Wolff et al. 2006
C       Wavelengths are supplied in microns.
C       The table lists indices in order of wavelength, real, and 
C       imaginary index.
C
C-----------------------------------------------------------------------

	subroutine mars_refind(lambda, ncr, nci)

	implicit none
	integer		n
	parameter	(n=450)
	integer		I, J, k, m
	real		lambda, ncr, nci, nu, table(n,3), tmp, frac
        character*100   ipfile,buffer


        ipfile = 'wolff06dust_bandfieldbasalt.um'

        call datarchive(ipfile)

        open(55,file=ipfile,status='old')
        read(55,1)buffer
        read(55,1)buffer
1       format(a)   
        do i=1,n
         read(55,*)(table(i,j),j=1,3)
        enddo        
        close(55)


	if ((lambda.lt.table(1,1)).or.(lambda.gt.table(n,1))) then
		write (*,*) ' Wavelength range exceeded in Mars lookup'
		write (*,*) ' lambda: ', lambda, ' Limits: ', 
     1			table(1,1), ' to', table(n,1)
		stop
	endif

	call locate (table, n, lambda, k)

        frac = (lambda - table(k,1))/(table(k+1,1)-table(k,1))

        ncr = table(k,2) + frac*(table(k+1,2)-table(k,2))
        nci = table(k,3) + frac*(table(k+1,3)-table(k,3))

	return

	end
	


************************************************************************
C-----------------------------------------------------------------------
C
C			SUBROUTINE NH4SH_REFIND
C
C	Returns the real and imaginary parts of the index of refraction 
C	of NH4SH. Data is taken from a file of Andy Collard's given by
C       Barbara Carlson.
C       *NEW PGJI 3/7/19 Data are now actually thought to have come from
C       Ferraro et al. (1980): 
C         J. R. Ferraro, G. Sill, and U. Fink, “Infrared intensity measurements 
C         of cryodeposited thin films of NH3, NH4HS, H2S, and assignments of 
C         absorption bands,” Appl. Spectrosc. 34, 525–533 (1980)
C       Wavelengths are supplied in microns. 
C       The table lists indices in order of wavelength , real, and 
C       imaginary index.
C
C       Note extra padded point at start
C
C-----------------------------------------------------------------------

	subroutine nh4sh_refind(lambda, ncr, nci)

	implicit none
	integer		n
	parameter	(n=364)
	integer		I, J, k, m
	real		lambda, ncr, nci, table(n,3), tmp, frac

	DATA ((Table(J,I),I=1,3),J=1,50) /
     &   0.5000, 1.750, 0.1000E-08,
     1   1.0000, 1.750, 0.1000E-08,
     2   2.6385, 2.194, 0.2660E-01,
     3   2.6455, 2.194, 0.2370E-01,
     4   2.6525, 2.194, 0.2080E-01,
     5   2.6596, 2.193, 0.1790E-01,
     6   2.6667, 2.190, 0.1500E-01,
     7   2.6738, 2.189, 0.1710E-01,
     8   2.6810, 2.189, 0.1440E-01,
     9   2.6882, 2.187, 0.1210E-01,
     &   2.6954, 2.185, 0.1150E-01,
     1   2.7027, 2.184, 0.1210E-01,
     2   2.7100, 2.183, 0.8500E-02,
     3   2.7174, 2.180, 0.8200E-02,
     4   2.7248, 2.179, 0.9200E-02,
     5   2.7322, 2.178, 0.6100E-02,
     6   2.7397, 2.176, 0.5500E-02,
     7   2.7473, 2.174, 0.6200E-02,
     8   2.7548, 2.172, 0.3700E-02,
     9   2.7624, 2.170, 0.5000E-02,
     &   2.7701, 2.168, 0.3100E-02,
     1   2.7778, 2.165, 0.3400E-02,
     2   2.7855, 2.163, 0.3400E-02,
     3   2.7933, 2.161, 0.3100E-02,
     4   2.8011, 2.159, 0.2500E-02,
     5   2.8090, 2.156, 0.3200E-02,
     6   2.8169, 2.154, 0.2800E-02,
     7   2.8249, 2.150, 0.3200E-02,
     8   2.8329, 2.150, 0.3200E-02,
     9   2.8409, 2.150, 0.3200E-02,
     &   2.8490, 2.145, 0.3200E-02,
     1   2.8571, 2.143, 0.3500E-02,
     2   2.8653, 2.140, 0.3200E-02,
     3   2.8736, 2.138, 0.3200E-02,
     4   2.8818, 2.134, 0.3200E-02,
     5   2.8902, 2.131, 0.4500E-02,
     6   2.8986, 2.129, 0.5900E-02,
     7   2.9070, 2.126, 0.4900E-02,
     8   2.9155, 2.122, 0.6500E-02,
     9   2.9240, 2.119, 0.6600E-02,
     &   2.9326, 2.115, 0.6600E-02,
     1   2.9412, 2.110, 0.9600E-02,
     2   2.9499, 2.106, 0.1030E-01,
     3   2.9586, 2.102, 0.1330E-01,
     4   2.9674, 2.098, 0.1600E-01,
     5   2.9762, 2.094, 0.2000E-01,
     6   2.9851, 2.093, 0.2680E-01,
     7   2.9940, 2.094, 0.2690E-01,
     8   3.0030, 2.090, 0.2560E-01,
     9   3.0120, 2.087, 0.3040E-01/

	DATA ((Table(J,I),I=1,3),J=51,100) /
     &   3.0211, 2.087, 0.3390E-01,
     1   3.0303, 2.085, 0.3130E-01,
     2   3.0395, 2.081, 0.3070E-01,
     3   3.0488, 2.074, 0.3150E-01,
     4   3.0581, 2.068, 0.3430E-01,
     5   3.0675, 2.062, 0.3720E-01,
     6   3.0769, 2.057, 0.4140E-01,
     7   3.0864, 2.052, 0.4500E-01,
     8   3.0960, 2.046, 0.4860E-01,
     9   3.1056, 2.041, 0.5440E-01,
     &   3.1153, 2.036, 0.5940E-01,
     1   3.1250, 2.031, 0.6310E-01,
     2   3.1348, 2.025, 0.6680E-01,
     3   3.1447, 2.017, 0.7060E-01,
     4   3.1546, 2.005, 0.7430E-01,
     5   3.1646, 1.992, 0.8810E-01,
     6   3.1746, 1.981, 0.9970E-01,
     7   3.1847, 1.970, 0.1179E+00,
     8   3.1949, 1.956, 0.1362E+00,
     9   3.2051, 1.951, 0.1798E+00,
     &   3.2154, 1.967, 0.2165E+00,
     1   3.2258, 2.016, 0.2570E+00,
     2   3.2362, 2.056, 0.2251E+00,
     3   3.2468, 2.081, 0.2077E+00,
     4   3.2573, 2.083, 0.1681E+00,
     5   3.2680, 2.035, 0.1027E+00,
     6   3.2787, 1.971, 0.1516E+00,
     7   3.2895, 1.949, 0.1845E+00,
     8   3.3003, 1.936, 0.2222E+00,
     9   3.3113, 1.925, 0.2601E+00,
     &   3.3223, 1.937, 0.3206E+00,
     1   3.3333, 1.968, 0.3531E+00,
     2   3.3445, 1.998, 0.3678E+00,
     3   3.3557, 2.013, 0.3735E+00,
     4   3.3670, 2.015, 0.3861E+00,
     5   3.3784, 2.015, 0.4170E+00,
     6   3.3898, 2.035, 0.4678E+00,
     7   3.4014, 2.076, 0.5038E+00,
     8   3.4130, 2.117, 0.5208E+00,
     9   3.4247, 2.164, 0.5572E+00,
     &   3.4364, 2.244, 0.5861E+00,
     1   3.4483, 2.351, 0.5688E+00,
     2   3.4602, 2.429, 0.4775E+00,
     3   3.4722, 2.427, 0.3584E+00,
     4   3.4843, 2.383, 0.3245E+00,
     5   3.4965, 2.344, 0.3021E+00,
     6   3.5088, 2.317, 0.3087E+00,
     7   3.5211, 2.293, 0.3200E+00,
     8   3.5336, 2.291, 0.3489E+00,
     9   3.5461, 2.278, 0.3621E+00/

	DATA ((Table(J,I),I=1,3),J=101,150) /
     &   3.5587, 2.257, 0.4033E+00,
     1   3.5714, 2.347, 0.5690E+00,
     2   3.5842, 2.516, 0.5228E+00,
     3   3.5971, 2.588, 0.3794E+00,
     4   3.6101, 2.576, 0.3160E+00,
     5   3.6232, 2.560, 0.2602E+00,
     6   3.6364, 2.545, 0.2366E+00,
     7   3.6496, 2.534, 0.2088E+00,
     8   3.6630, 2.524, 0.1891E+00,
     9   3.6765, 2.517, 0.1774E+00,
     &   3.6900, 2.513, 0.1573E+00,
     1   3.7037, 2.507, 0.1413E+00,
     2   3.7175, 2.499, 0.1251E+00,
     3   3.7313, 2.489, 0.1089E+00,
     4   3.7453, 2.479, 0.1009E+00,
     5   3.7594, 2.470, 0.8860E-01,
     6   3.7736, 2.461, 0.8210E-01,
     7   3.7879, 2.453, 0.7480E-01,
     8   3.8023, 2.446, 0.6830E-01,
     9   3.8168, 2.437, 0.6340E-01,
     &   3.8314, 2.432, 0.5930E-01,
     1   3.8462, 2.426, 0.5440E-01,
     2   3.8610, 2.422, 0.5030E-01,
     3   3.8760, 2.415, 0.4350E-01,
     4   3.8911, 2.406, 0.3930E-01,
     5   3.9063, 2.403, 0.4650E-01,
     6   3.9216, 2.403, 0.3520E-01,
     7   3.9370, 2.398, 0.3360E-01,
     8   3.9526, 2.392, 0.2660E-01,
     9   3.9683, 2.386, 0.2490E-01,
     &   3.9841, 2.381, 0.2370E-01,
     1   4.0000, 2.378, 0.2240E-01,
     2   4.0161, 2.373, 0.1890E-01,
     3   4.0323, 2.369, 0.1810E-01,
     4   4.0486, 2.365, 0.1730E-01,
     5   4.0650, 2.362, 0.1600E-01,
     6   4.0816, 2.358, 0.1370E-01,
     7   4.0984, 2.355, 0.1240E-01,
     8   4.1152, 2.351, 0.1060E-01,
     9   4.1322, 2.348, 0.9700E-02,
     &   4.1494, 2.345, 0.8800E-02,
     1   4.1667, 2.342, 0.7500E-02,
     2   4.1841, 2.339, 0.6100E-02,
     3   4.2017, 2.336, 0.5200E-02,
     4   4.2194, 2.332, 0.4700E-02,
     5   4.2373, 2.330, 0.4300E-02,
     6   4.2553, 2.327, 0.2900E-02,
     7   4.2735, 2.324, 0.1900E-02,
     8   4.2918, 2.320, 0.1400E-02,
     9   4.3103, 2.317, 0.1500E-02/

	DATA ((Table(J,I),I=1,3),J=151,200) /
     &   4.3290, 2.314, 0.1500E-02,
     1   4.3478, 2.311, 0.1500E-02,
     2   4.3668, 2.308, 0.2000E-02,
     3   4.3860, 2.305, 0.3000E-02,
     4   4.4053, 2.303, 0.4000E-02,
     5   4.4248, 2.302, 0.4500E-02,
     6   4.4444, 2.300, 0.5000E-02,
     7   4.4643, 2.300, 0.5000E-02,
     8   4.4843, 2.297, 0.3000E-02,
     9   4.5045, 2.295, 0.3000E-02,
     &   4.5249, 2.292, 0.3600E-02,
     1   4.5455, 2.290, 0.3100E-02,
     2   4.5662, 2.287, 0.3100E-02,
     3   4.5872, 2.285, 0.3100E-02,
     4   4.6083, 2.281, 0.3600E-02,
     5   4.6296, 2.277, 0.4700E-02,
     6   4.6512, 2.273, 0.7800E-02,
     7   4.6729, 2.270, 0.1150E-01,
     8   4.6948, 2.268, 0.1740E-01,
     9   4.7170, 2.269, 0.2120E-01,
     &   4.7393, 2.270, 0.2550E-01,
     1   4.7619, 2.273, 0.2940E-01,
     2   4.7847, 2.276, 0.3060E-01,
     3   4.8077, 2.281, 0.3180E-01,
     4   4.8309, 2.284, 0.2930E-01,
     5   4.8544, 2.286, 0.2720E-01,
     6   4.8780, 2.286, 0.2190E-01,
     7   4.9020, 2.285, 0.2200E-01,
     8   4.9261, 2.285, 0.2100E-01,
     9   4.9505, 2.285, 0.1780E-01,
     &   4.9751, 2.283, 0.1560E-01,
     1   5.0000, 2.282, 0.1350E-01,
     2   5.0251, 2.279, 0.1130E-01,
     3   5.0505, 2.276, 0.1130E-01,
     4   5.0761, 2.273, 0.1140E-01,
     5   5.1020, 2.271, 0.1030E-01,
     6   5.1282, 2.268, 0.1040E-01,
     7   5.1546, 2.265, 0.1040E-01,
     8   5.1813, 2.261, 0.1050E-01,
     9   5.2083, 2.257, 0.1170E-01,
     &   5.2356, 2.251, 0.1410E-01,
     1   5.2632, 2.246, 0.2010E-01,
     2   5.2910, 2.242, 0.2610E-01,
     3   5.3191, 2.243, 0.3580E-01,
     4   5.3476, 2.244, 0.4200E-01,
     5   5.3763, 2.248, 0.4830E-01,
     6   5.4054, 2.250, 0.5460E-01,
     7   5.4348, 2.258, 0.6220E-01,
     8   5.4645, 2.262, 0.6380E-01,
     9   5.4945, 2.273, 0.7400E-01/

	DATA ((Table(J,I),I=1,3),J=201,250) /
     &   5.5249, 2.296, 0.8310E-01,
     1   5.5556, 2.318, 0.5610E-01,
     2   5.5866, 2.315, 0.3130E-01,
     3   5.6180, 2.306, 0.2270E-01,
     4   5.6497, 2.299, 0.1900E-01,
     5   5.6818, 2.294, 0.1400E-01,
     6   5.7143, 2.288, 0.1280E-01,
     7   5.7471, 2.285, 0.1290E-01,
     8   5.7803, 2.281, 0.1300E-01,
     9   5.8140, 2.278, 0.1040E-01,
     &   5.8480, 2.276, 0.1440E-01,
     1   5.8824, 2.277, 0.1190E-01,
     2   5.9172, 2.271, 0.6600E-02,
     3   5.9524, 2.269, 0.1340E-01,
     4   5.9880, 2.264, 0.9400E-02,
     5   6.0241, 2.264, 0.1760E-01,
     6   6.0606, 2.265, 0.2040E-01,
     7   6.0976, 2.267, 0.1370E-01,
     8   6.1350, 2.267, 0.2200E-01,
     9   6.1728, 2.272, 0.1250E-01,
     &   6.2112, 2.267, 0.7000E-02,
     1   6.2500, 2.262, 0.7000E-02,
     2   6.2893, 2.258, 0.7100E-02,
     3   6.3291, 2.257, 0.5700E-02,
     4   6.3694, 2.252, 0.5700E-02,
     5   6.4103, 2.250, 0.5000E-02,
     6   6.4516, 2.245, 0.4300E-02,
     7   6.4935, 2.242, 0.1500E-02,
     8   6.5359, 2.233, 0.0000E+00,
     9   6.5789, 2.227, 0.3000E-02,
     &   6.6225, 2.217, 0.3000E-02,
     1   6.6667, 2.211, 0.6700E-02,
     2   6.7114, 2.197, 0.9000E-02,
     3   6.7568, 2.189, 0.1520E-01,
     4   6.8027, 2.170, 0.2290E-01,
     5   6.8493, 2.158, 0.3070E-01,
     6   6.8966, 2.119, 0.4640E-01,
     7   6.9444, 2.041, 0.7010E-01,
     8   6.9832, 2.044, 0.2523E+00,
     9   6.9930, 2.096, 0.2982E+00,
     &   7.0028, 2.156, 0.2672E+00,
     1   7.0323, 2.147, 0.1736E+00,
     2   7.0423, 2.040, 0.1422E+00,
     3   7.0472, 2.001, 0.2024E+00,
     4   7.0872, 2.176, 0.6870E+00,
     5   7.0922, 2.331, 0.7480E+00,
     6   7.0972, 2.431, 0.6897E+00,
     7   7.1429, 2.626, 0.1603E+00,
     8   7.1942, 2.472, 0.6460E-01,
     9   7.2464, 2.397, 0.5850E-01/

	DATA ((Table(J,I),I=1,3),J=251,300) /
     &   7.2993, 2.388, 0.4910E-01,
     1   7.3529, 2.370, 0.3300E-01,
     2   7.4074, 2.360, 0.2490E-01,
     3   7.4627, 2.343, 0.1670E-01,
     4   7.5188, 2.335, 0.1690E-01,
     5   7.5758, 2.325, 0.1530E-01,
     6   7.6336, 2.322, 0.1460E-01,
     7   7.6923, 2.314, 0.1380E-01,
     8   7.7519, 2.312, 0.1300E-01,
     9   7.8125, 2.306, 0.1230E-01,
     &   7.8740, 2.304, 0.1240E-01,
     1   7.9365, 2.300, 0.1250E-01,
     2   8.0000, 2.299, 0.1260E-01,
     3   8.0645, 2.295, 0.1090E-01,
     4   8.1301, 2.293, 0.1280E-01,
     5   8.1967, 2.291, 0.1290E-01,
     6   8.2645, 2.290, 0.1300E-01,
     7   8.3333, 2.287, 0.1220E-01,
     8   8.4034, 2.285, 0.1320E-01,
     9   8.4746, 2.282, 0.1520E-01,
     &   8.5470, 2.282, 0.1730E-01,
     1   8.6207, 2.281, 0.1740E-01,
     2   8.6957, 2.281, 0.1850E-01,
     3   8.7719, 2.280, 0.1970E-01,
     4   8.8496, 2.280, 0.1990E-01,
     5   8.9286, 2.280, 0.2000E-01,
     6   9.0090, 2.279, 0.2020E-01,
     7   9.0909, 2.278, 0.2040E-01,
     8   9.1743, 2.271, 0.2060E-01,
     9   9.2593, 2.267, 0.3120E-01,
     &   9.3458, 2.288, 0.5870E-01,
     1   9.4340, 2.303, 0.2120E-01,
     2   9.5238, 2.295, 0.1820E-01,
     3   9.6154, 2.289, 0.1940E-01,
     4   9.7087, 2.289, 0.1530E-01,
     5   9.8039, 2.286, 0.1760E-01,
     6   9.9010, 2.290, 0.1780E-01,
     7  10.0000, 2.287, 0.9000E-02,
     8  10.1010, 2.282, 0.9100E-02,
     9  10.2040, 2.278, 0.1140E-01,
     &  10.3090, 2.277, 0.1270E-01,
     1  10.4170, 2.275, 0.1520E-01,
     2  10.5260, 2.276, 0.1650E-01,
     3  10.6380, 2.275, 0.1790E-01,
     4  10.7530, 2.275, 0.1930E-01,
     5  10.8700, 2.276, 0.2200E-01,
     6  10.9890, 2.279, 0.2220E-01,
     7  11.1110, 2.280, 0.2120E-01,
     8  11.2360, 2.282, 0.2270E-01,
     9  11.3640, 2.285, 0.2300E-01/

	DATA ((Table(J,I),I=1,3),J=301,350) /
     &  11.4940, 2.289, 0.1810E-01,
     1  11.6280, 2.289, 0.1300E-01,
     2  11.7650, 2.288, 0.1060E-01,
     3  11.9050, 2.286, 0.5300E-02,
     4  12.0480, 2.283, 0.4100E-02,
     5  12.1950, 2.281, 0.2700E-02,
     6  12.3460, 2.278, 0.1400E-02,
     7  12.5000, 2.276, 0.1400E-02,
     8  12.6580, 2.274, 0.0000E+00,
     9  12.8210, 2.271, 0.0000E+00,
     &  12.9870, 2.269, 0.0000E+00,
     1  13.1580, 2.267, 0.0000E+00,
     2  13.3330, 2.265, 0.0000E+00,
     3  13.5140, 2.263, 0.0000E+00,
     4  13.6990, 2.261, 0.0000E+00,
     5  13.8890, 2.259, 0.0000E+00,
     6  14.0850, 2.257, 0.0000E+00,
     7  14.2860, 2.255, 0.0000E+00,
     8  14.4930, 2.251, 0.0000E+00,
     9  14.7060, 2.249, 0.0000E+00,
     &  14.9250, 2.243, 0.0000E+00,
     1  15.1520, 2.240, 0.3400E-02,
     2  15.3850, 2.235, 0.6900E-02,
     3  15.6250, 2.234, 0.1050E-01,
     4  15.8730, 2.229, 0.1420E-01,
     5  16.1290, 2.226, 0.1810E-01,
     6  16.3930, 2.229, 0.3680E-01,
     7  16.6670, 2.239, 0.2990E-01,
     8  16.9490, 2.240, 0.3040E-01,
     9  17.2410, 2.244, 0.2710E-01,
     &  17.5440, 2.239, 0.1970E-01,
     1  17.8570, 2.236, 0.2000E-01,
     2  18.1820, 2.232, 0.2040E-01,
     3  18.5190, 2.225, 0.6200E-02,
     4  18.8680, 2.208, 0.1480E-01,
     5  19.2310, 2.200, 0.1290E-01,
     6  19.6080, 2.167, 0.1320E-01,
     7  20.0000, 2.157, 0.5160E-01,
     8  20.4080, 2.174, 0.9160E-01,
     9  20.8330, 2.147, 0.1400E-01,
     &  21.2770, 2.080, 0.1194E+00,
     1  21.7390, 2.079, 0.1951E+00,
     2  22.2220, 2.213, 0.3491E+00,
     3  22.7270, 2.213, 0.3491E+00,
     4  23.0000, 2.213, 0.3491E+00,
     5  25.0000, 2.213, 0.3491E+00,
     6  30.0000, 2.213, 0.3491E+00,
     7  35.0000, 2.213, 0.3491E+00,
     8  40.0000, 2.213, 0.3491E+00,
     9  45.0000, 2.213, 0.3491E+00/

	DATA ((Table(J,I),I=1,3),J=351,n) /
     &  50.0000, 2.213, 0.3491E+00,
     1  60.0000, 2.213, 0.3491E+00,
     2  70.0000, 2.213, 0.3491E+00,
     3  80.0000, 2.213, 0.3491E+00,
     4  90.0000, 2.213, 0.3491E+00,
     5 100.0000, 2.213, 0.3491E+00,
     6 120.0000, 2.213, 0.3491E+00,
     7 150.0000, 2.213, 0.3491E+00,
     8 200.0000, 2.213, 0.3491E+00,
     9 250.0000, 2.213, 0.3491E+00,
     & 300.0000, 2.213, 0.3491E+00,
     1 400.0000, 2.213, 0.3491E+00,
     2 500.0000, 2.213, 0.3491E+00,
     3 999.9900, 2.213, 0.3491E+00/




	if ((lambda.lt.table(1,1)).or.(lambda.gt.table(n,1))) then
		write (*,*) ' Wavelength range exceeded in NH4SH lookup'
		write (*,*) ' lambda: ', lambda, ' Limits: ', 
     1			table(1,1), ' to', table(n,1)
		stop
	endif

	call locate (table, n, lambda, k)

        frac = (lambda - table(k,1))/(table(k+1,1)-table(k,1))

        ncr = table(k,2) + frac*(table(k+1,2)-table(k,2))
        nci = table(k,3) + frac*(table(k+1,3)-table(k,3))

	return

	end
	



	subroutine table_refind(lambda, ncr, nci)
C       *************************************************************
C	External table should have 2 indicators at its beginning:
C	1) nspec = no. of wavenumbers/wavelengths in file
C	2) idspec = 1, means wavelengths
C		  = 2, means wavenumbers
C
C       *************************************************************

	implicit none
	integer		n
	parameter	(n=5000)
	integer		I, J, k, m, ilist, nspec, idspec
	real	lambda, ncr, nci, nu, table(n,3), tmp, frac
        character*100    opfile
	
        common /store/ ilist,nspec,idspec,table

        if(ilist.ne.-999)then         

         call prompt('Enter name of Ref Index file : ')
         read(5,1)opfile
1        format(a)

         open(78,file=opfile,status='old')
         read(78,*)nspec
C	 print*, nspec

         if(nspec.lt.n)then

            read(78,*)idspec
C	    print*, idspec

            do 21 i=1,nspec
               read(78,*)(table(i,j),j=1,3)
21          continue
            close(78)
         else
            print*,'Abort. file too long'
            stop
         endif
         
C         print*,'file read OK'
         ilist=-999
        endif

	
C	print*, table(1,1), table(nspec,1), table (3,3)
		
C -----------------------------------------------------------------------
C	Little loop that checks to see if your data is
C	wavenumbers or wavelenghts...
C ------------------------------------------------------------------------

        if(idspec.eq.1)then
         nu = lambda
        else
 	 nu = 1.e4/lambda
        endif

C ------------------------------------------------------------------------
C	This is where it looks if the waveno. range was extended...
C -------------------------------------------------------------------------

	if ((nu.lt.table(1,1)).or.(nu.gt.table(nspec,1))) then
		write (*,*) ' Wave range exceeded in external lookup'
		write (*,*) ' Nu: ', nu, ' Limits: ', 
     1			table(1,1), ' to', table(nspec,1)
		stop
	endif

C ------------------------------------------------------------------------
C 	Locate: a Numerical Recipies subroutine
C -------------------------------------------------------------------------

	call locate (table, nspec, nu, k)


C ------------------------------------------------------------------------
C 	Here it actually calculates the ref. index...
C -------------------------------------------------------------------------

C	print*, table (1,1), table (2,2),nu
C	print*, 'I am before frac'


        frac = (nu - table(k,1))/(table(k+1,1)-table(k,1))

		
C	print*, 'I am after frac'

        ncr = table(k,2) + frac*(table(k+1,2)-table(k,2))
        nci = table(k,3) + frac*(table(k+1,3)-table(k,3))

		
C	print*, 'I am after ncr and nci'
C	print*, ncr,nci

	return

	end
	

